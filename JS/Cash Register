Касовий апарат
Розробіть функцію касового апарату checkCashRegister(), яка приймає ціну покупки як перший аргумент (price), оплату як другий аргумент (cash) та суму готівки в касі як третій аргумент (cid).

cid — це 2D масив, який містить список доступного обігу.

Функція checkCashRegister() завжди повинна повертати об’єкт з ключем status та ключем change.

Поверніть {status: "INSUFFICIENT_FUNDS", change: []}, якщо сума готівки в касі менша за здачу, або ви не можете віддати здачу.

Поверніть {status: "CLOSED", change: [...]} з сумою в касі як значення ключа change, якщо воно дорівнює здачі.

В іншому випадку, поверніть {status: "OPEN", change: [...]} зі здачею в монетах і банкнотах, в порядку від найбільшої до найменшої, як значення ключа change.

Грошовий обіг	Сума
Пенні	$0.01 (ПЕННІ)
Нікель	$0.05 (НІКЕЛЬ)
Дайм	$0.1 (ДАЙМ)
Чверть	$0.25 (ЧВЕРТЬ)
Долар	$1 (ОДИН)
П’ять доларів	$5 (П’ЯТЬ)
Десять доларів	$10 (ДЕСЯТЬ)
Двадцять доларів	$20 (ДВАДЦЯТЬ)
Сто доларів	$100 (СТО)
Подивіться нижче на приклад масиву з сумою в касі:

[
  ["PENNY", 1.01],
  ["NICKEL", 2.05],
  ["DIME", 3.1],
  ["QUARTER", 4.25],
  ["ONE", 90],
  ["FIVE", 55],
  ["TEN", 20],
  ["TWENTY", 60],
  ["ONE HUNDRED", 100]
]

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



function checkCashRegister(price, cash, cid) {
  let change = (cash * 100) - (price * 100);
  let changeArr = []
  let money = {
      
  "PENNY": 1,
  "NICKEL": 5,
  "DIME": 10,
  "QUARTER": 25,
  "ONE": 100,
  "FIVE": 500,
  "TEN": 1000,
  "TWENTY": 2000,
  "ONE HUNDRED": 10000,

  };
  let totalCash = cid.reduce((sum, elem) => sum + (elem[1] * 100),0);
  if (totalCash < change){
      return {status: "INSUFFICIENT_FUNDS", change: []};
  }
  if (totalCash == change) {
      return {status: "CLOSED", change: cid};
  }
  for (let i = cid.length - 1; i >= 0; i--){
      let changeMoney = 0
      while (change >= (money[cid[i][0]]) & (cid[i][1] * 100) > 0){
        
        change -= money[cid[i][0]];
        cid[i][1] = (cid[i][1] * 100 - money[cid[i][0]]) / 100;
        changeMoney += money[cid[i][0]]; 
      }
      
      if(changeMoney > 0){
      changeArr.push([cid[i][0], changeMoney / 100])}
  }
  
  if (change !== 0){
      return {status: "INSUFFICIENT_FUNDS", change: []}
  } else {
    return {status: "OPEN", change: changeArr}
  }
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]])


|||||||||||||||||||| ИЛИ Переводим массив в копейки с оерушлением


function checkCashRegister(price, cash, cid) {
  let change = (cash * 100) - (price * 100);
  let changeArr = []
  let money = {
      
  "PENNY": 1,
  "NICKEL": 5,
  "DIME": 10,
  "QUARTER": 25,
  "ONE": 100,
  "FIVE": 500,
  "TEN": 1000,
  "TWENTY": 2000,
  "ONE HUNDRED": 10000,

  };
  let cidDec = cid.map(elem => [elem[0], Math.round(elem[1] * 100)]);
 
  let totalCash = cidDec.reduce((sum, elem) => sum + elem[1],0);
  
  if (totalCash < change){
      return {status: "INSUFFICIENT_FUNDS", change: []};
  }
  if (totalCash == change) {
      return {status: "CLOSED", change: cid};
  }
  for (let i = cidDec.length - 1; i >= 0; i--){
      let changeMoney = 0
      while (change >= (money[cidDec[i][0]]) & cidDec[i][1]  > 0){
        
        change -= money[cidDec[i][0]];
        cidDec[i][1] = cidDec[i][1] - money[cidDec[i][0]];
        changeMoney += money[cidDec[i][0]]; 
      }
      
      if(changeMoney > 0){
      changeArr.push([cidDec[i][0], changeMoney / 100])}
  }
  
  if (change !== 0){
      return {status: "INSUFFICIENT_FUNDS", change: []}
  } else {
    return {status: "OPEN", change: changeArr}
  }
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]])

